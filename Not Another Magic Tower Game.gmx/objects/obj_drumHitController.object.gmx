<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>taikoLeftRed = ord("D");
taikoRightRed = ord("J");
taikoLeftBlue = ord("S");
taikoRightBlue = ord("K");
right = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!auto)

{
    len = abs(obj_osuController.taikoSpd) * 8;
    element = obj_osuController.element[obj_osuController.currentTaikoIndex];
    dis = point_distance(element.x, element.y, obj_taikoBoard.x, obj_taikoBoard.y);
    element.dis = dis;
    if(keyboard_check_pressed(taikoLeftRed))
    {
        obj = instance_create(obj_taikoDrum.x, obj_taikoDrum.y, obj_taikoDrumHit);
        obj.sprite_index = spr_leftred;
        if(!(dis &gt; len &amp;&amp; element.x &gt; obj_taikoBoard.x))
        {
            element.hitType = 0;
            element.isHit = true;
        }
        sound_fix(snd_redHit);
    }
    if(keyboard_check_pressed(taikoRightRed))
    {
        obj = instance_create(obj_taikoDrum.x, obj_taikoDrum.y, obj_taikoDrumHit);
        obj.sprite_index = spr_rightred;
        if(!(dis &gt; len &amp;&amp; element.x &gt; obj_taikoBoard.x))
        {
            element.hitType = 0;
            element.isHit = true;
        }
        sound_fix(snd_redHit);
    }
    if(keyboard_check_pressed(taikoLeftBlue))
    {
        obj = instance_create(obj_taikoDrum.x, obj_taikoDrum.y, obj_taikoDrumHit);
        obj.sprite_index = spr_leftblue;
        if(!(dis &gt; len &amp;&amp; element.x &gt; obj_taikoBoard.x))
        {
            element.hitType = 1;
            element.isHit = true;
        }
        sound_fix(snd_blueHit);
    }
    if(keyboard_check_pressed(taikoRightBlue))
    {
        obj = instance_create(obj_taikoDrum.x, obj_taikoDrum.y, obj_taikoDrumHit);
        obj.sprite_index = spr_rightblue;
        if(!(dis &gt; len &amp;&amp; element.x &gt; obj_taikoBoard.x))
        {
            element.hitType = 1;
            element.isHit = true;
        }
        sound_fix(snd_blueHit);
    }

}
else
{
    
    element = obj_osuController.element[obj_osuController.currentTaikoIndex];
    dis = point_distance(element.x, element.y, obj_taikoBoard.x, obj_taikoBoard.y);
    if(dis &lt;= 5)
    {
        obj = instance_create(obj_taikoDrum.x, obj_taikoDrum.y, obj_taikoDrumHit);
        element.isHit = true;
        element.dis = dis;
        if(element.type mod 2 != 0)
        {
            element.hitType = 1;
        }
        if(right &gt; 0)
        {
            if(element.type == 0 || element.type == 2)
            {
                obj.sprite_index = spr_rightred;
                sound_fix(snd_redHit);
            }
            else
            {
                obj.sprite_index = spr_rightblue;
                sound_fix(snd_blueHit);
            }
        }
        else
        {
            if(element.type == 0 || element.type == 2)
            {
                obj.sprite_index = spr_leftred;
                sound_fix(snd_redHit);
            }
            else
            {
                obj.sprite_index = spr_leftblue;
                sound_fix(snd_blueHit);
            }
        }
        right *= -1;      
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>combo = obj_osuController.combo;
if(combo &gt; 0)
{
   if(combo &gt;= 1000)
   {
      tempCombo = combo;
      draw_sprite_ext(spr_taikoCombo, floor(tempCombo/1000),obj_taikoDrum.x-20, obj_taikoDrum.y,1,1,0,c_white,1);
      c = tempCombo mod 1000;
      tempCombo = c;
      draw_sprite_ext(spr_taikoCombo, floor(tempCombo/100),obj_taikoDrum.x-8, obj_taikoDrum.y,1,1,0,c_white,1);
      c = tempCombo mod 100;
      tempCombo = c;
      draw_sprite_ext(spr_taikoCombo, floor(tempCombo/10),obj_taikoDrum.x+8, obj_taikoDrum.y,1,1,0,c_white,1);
      c = tempCombo mod 10;
      tempCombo = c;
      draw_sprite_ext(spr_taikoCombo, tempCombo,obj_taikoDrum.x+20, obj_taikoDrum.y,1,1,0,c_white,1);
   }
   else if(combo &gt;= 100)
   {
      tempCombo = combo;
      draw_sprite_ext(spr_taikoCombo, floor(tempCombo/100),obj_taikoDrum.x-12, obj_taikoDrum.y,1,1,0,c_white,1);
      c = tempCombo mod 100;
      tempCombo = c;
      draw_sprite_ext(spr_taikoCombo, floor(tempCombo/10),obj_taikoDrum.x, obj_taikoDrum.y,1,1,0,c_white,1);
      c = tempCombo mod 10;
      tempCombo = c;
      draw_sprite_ext(spr_taikoCombo, tempCombo,obj_taikoDrum.x+12, obj_taikoDrum.y,1,1,0,c_white,1);
   }
   else if(combo &gt;= 10)
   {
      tempCombo = combo;
      draw_sprite_ext(spr_taikoCombo, floor(tempCombo/10),obj_taikoDrum.x-8, obj_taikoDrum.y,1,1,0,c_white,1);
      c = tempCombo mod 10;
      tempCombo = c;
      draw_sprite_ext(spr_taikoCombo, tempCombo,obj_taikoDrum.x+8, obj_taikoDrum.y,1,1,0,c_white,1);
   }
   else
   {
      draw_sprite_ext(spr_taikoCombo, combo,obj_taikoDrum.x, obj_taikoDrum.y,1,1,0,c_white,1);
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
